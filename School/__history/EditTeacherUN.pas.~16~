unit EditTeacherUN;

interface

uses
  Winapi.Windows, Winapi.Messages, System.SysUtils, System.Variants, System.Classes, Vcl.Graphics,
  Vcl.Controls, Vcl.Forms, Vcl.Dialogs, Vcl.StdCtrls, Vcl.ExtCtrls, DMUN,
  Data.DB, Data.Win.ADODB, System.Actions, Vcl.ActnList;

type
  TFMEditTeacher = class(TForm)
    Firstname_LBL: TLabel;
    Label1: TLabel;
    FMeditstudent: TLabel;
    Label3: TLabel;
    Label4: TLabel;
    Label5: TLabel;
    Label6: TLabel;
    Label7: TLabel;
    Panel2: TPanel;
    Firstname_EDT: TEdit;
    Lastname_EDT: TEdit;
    Education_EDT: TEdit;
    Age_EDT: TEdit;
    Address_EDT: TEdit;
    Tell_EDT: TEdit;
    National_EDT: TEdit;
    Identify_EDT: TEdit;
    Register_BTN: TButton;
    EditTeacher_QRY: TADOQuery;
    ActionList1: TActionList;
    SaveAction: TAction;
    procedure FormShow(Sender: TObject);
    procedure SaveActionExecute(Sender: TObject);
  private
    { Private declarations }
    procedure OpenQuery;
  public
    { Public declarations }
    IDTeacher : integer;

  end;

var
  FMEditTeacher: TFMEditTeacher;

implementation

{$R *.dfm}

{ TFMEditTeacher }

procedure TFMEditTeacher.FormShow(Sender: TObject);
begin
     OpenQuery;
end;

procedure TFMEditTeacher.OpenQuery;
begin
  With EditTeacher_QRY Do
  begin
    SQL.Clear;
    SQL.Add('Select * from Teachers where IDTeacher = '+IntToStr(IDTeacher));
    Open;
    Firstname_EDT.Text := FieldByName('FirstName').AsString;
    Lastname_EDT.Text  := FieldByName('LastName').AsString;
    Education_EDT.Text := FieldByName('Educate').AsString;
    Age_EDT.Text := FieldByName('Age').AsString;
    Address_EDT.Text := FieldByName('Address').AsString;
    National_EDT.Text := FieldByName('NationalCode').AsString;
    Identify_EDT.Text := FieldByName('IdTeacher').AsString;
    Tell_EDT.Text := FieldByName('Telephone').AsString;
  end;
end;
////////////////////////////////////////////////////////////////////////////////

procedure TFMEditTeacher.SaveActionExecute(Sender: TObject);
var checkid : integer;
begin

  checkid := Strtoint(Identify_EDT.Text);

  if (Identify_EDT.Text = '') then
  begin
    ShowMessage('you have to insert an unique ID!');
    abort;
  end;


  with EditTeacher_QRY Do
    begin

      SQL.Add(Format('select * from Teachers where IDTeacher =%d',[IDTeacher]));
      Open;
      Edit;

      //If Id teacher has relation with student and teacher table --> check
      with TADOQuery.Create(nil) Do
      begin
          Connection := DataModule1.ADOConnection1;
          SQL.Add(Format('select * from Studentteacher where IDTeacher =%d',[IDTeacher]));
          Open;

          if not IsEmpty and (IDTeacher <> checkid) then
           begin
             ShowMessage('This ID Teacher cannot be changed. you have to change ID in(student & teacher)form first!');
             Abort;
           end;
      end;

      //If ID is using before
      with TADOQuery.Create(nil) Do
      begin
        Connection := DataModule1.ADOConnection1;
        SQL.Add(Format('select * from teachers where IDTeacher=%d',[checkid]));
        Open;

        if not IsEmpty then
        begin
          ShowMessage('This ID is using Now! try another ID...');
          Abort;
        end;


      end;


          //everything it is ok
          FieldByName('Firstname').AsString := Firstname_EDT.Text;
          FieldByName('lastname').AsString := Lastname_EDT.Text;
          FieldByName('educate').AsString := Education_EDT.Text;
          FieldByName('age').Asstring := Age_EDT.Text;
          fieldbyname('address').AsString := Address_EDT.Text;
          FieldByName('nationalcode').AsString := National_EDT.Text;
          FieldByName('telephone').AsString := Tell_EDT.Text;
          fieldbyname('idteacher').AsString := Identify_EDT.Text;
          Post;
          SQL.Clear;
          Close;
          ShowMessage('It is Done!');
      end;
    end;

end.
